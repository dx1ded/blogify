// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("Anonymous")
  email         String    @unique
  emailVerified DateTime?
  image         String    @default("https://img.freepik.com/premium-vector/people-profile-graphic_24911-21373.jpg")
  password      String? // Field for credentials provider
  createdAt     DateTime  @default(now())

  accounts Account[]
  posts    Post[]
  comments Comment[]

  likedPosts    Post[]    @relation("PostLikes")
  likedComments Comment[] @relation("CommentLikes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id           String   @id @default(cuid())
  title        String
  slug         String
  content      String
  tags         String[]
  thumbnailUrl String
  createdAt    DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  likedBy User[] @relation("PostLikes")

  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  likedBy User[] @relation("CommentLikes")

  // Self-relation for subcomments
  parentComment   Comment? @relation("Subcomments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?

  subcomments Comment[] @relation("Subcomments")
}
